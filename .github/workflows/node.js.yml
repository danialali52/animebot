const { Telegraf, Markup } = require('telegraf');

const bot = new Telegraf('7027573205:AAEgWXxYKQQX7ECeYdLieTV1xz6oPOiNMGk');

// Define user object structure to store user data
const users = {};

// Define daily check-in reward and other parameters
const dailyCheckInReward = 10;
const ptcRewardPerAd = 20;
const faucetReward = 2;
const dailyFaucetLimit = 1;

// Error handling middleware
bot.catch((err, ctx) => {
    console.error(`Error for ${ctx.updateType}`, err);
    ctx.reply('An error occurred. Please try again later.');
});

// Start command with welcome message and buttons for commands
bot.start((ctx) => {
    const userId = ctx.from.id;
    if (!users[userId]) {
        users[userId] = {
            balance: 0,
            lastCheckIn: null,
            dailyFaucetCount: 0
        };
    }

    ctx.replyWithHTML(
        `<b>Welcome to Faucet Bot!</b>\n\nYour current balance is <b>${users[userId].balance} coins</b>.\n\nPlease choose an option from below:`,
        Markup.keyboard([
            ['/checkin', '/ptc'],
            ['/faucet', '/balance'],
            ['/withdraw']
        ]).oneTime().resize().extra()
    );
});

// Command to check in for daily rewards
bot.command('checkin', (ctx) => {
    const userId = ctx.from.id;
    if (!users[userId]) {
        users[userId] = {
            balance: 0,
            lastCheckIn: null,
            dailyFaucetCount: 0
        };
    }

    const now = new Date();
    const lastCheckInDate = users[userId].lastCheckIn;

    if (!lastCheckInDate || lastCheckInDate.getDate() !== now.getDate()) {
        users[userId].balance += dailyCheckInReward;
        users[userId].lastCheckIn = now;
        ctx.reply(`Daily check-in successful! You earned ${dailyCheckInReward} coins.\nYour updated balance is ${users[userId].balance} coins.`);
    } else {
        ctx.reply('You have already checked in today.');
    }
});

// Command to view PTC ads
bot.command('ptc', (ctx) => {
    // Here, you would implement logic to fetch and display PTC ads
    // For simplicity, let's assume we have a list of PTC ads URLs
    const ptcAds = ['https://example.com/ad1', 'https://example.com/ad2', 'https://example.com/ad3'];

    const keyboard = Markup.inlineKeyboard(
        ptcAds.map((ad, index) => [
            Markup.button.url(`Ad ${index + 1}`, ad)
        ])
    );

    ctx.reply('View PTC ads:', keyboard);
});

// Command to claim faucet reward
bot.command('faucet', (ctx) => {
    const userId = ctx.from.id;
    if (!users[userId]) {
        users[userId] = {
            balance: 0,
            lastCheckIn: null,
            dailyFaucetCount: 0
        };
    }

    if (users[userId].dailyFaucetCount < dailyFaucetLimit) {
        users[userId].balance += faucetReward;
        users[userId].dailyFaucetCount++;
        ctx.reply(`Faucet reward claimed! You earned ${faucetReward} coins.\nYour updated balance is ${users[userId].balance} coins.`);
    } else {
        ctx.reply('You have reached the daily faucet limit.');
    }
});

// Command to check wallet balance
bot.command('balance', (ctx) => {
    const userId = ctx.from.id;
    if (!users[userId]){
        users[userId] = {
            balance: 0,
            lastCheckIn: null,
            dailyFaucetCount: 0
        };
    }

    ctx.reply(`Your current balance is ${users[userId].balance} coins.`);
});

// Command to withdraw from wallet
bot.command('withdraw', (ctx) => {
    // Here, you would implement logic for withdrawing from the wallet
    ctx.reply('Withdraw from wallet.'); // Placeholder message
});

// Launch the bot
async function launchBot() {
    try {
        await bot.launch();
        console.log('Bot is running...');
    } catch (err) {
        console.error('Error starting bot:', err);
    }
}

launchBot();
